<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd">

    <!--spring依赖注入
           依赖注入：
              Dependency Injection
           IOC的作用：
               降低程序间的耦合（依赖关系）
           依赖关系的管理：
               以后都交给spring来维护
            在当前类需要用到其他类的对象的时候，由spring为我们提供，我们只需要在配置文件中说明
           依赖关系的维护：
                被称为依赖注入。
           依赖注入：
                 能注入数据有三类：
                      基本类型和string
                      其他bean类型（在配置文件或者注解配置过的bean）
                      复杂类型/集合类型
                  注入的方式有3种：
                       第一种：使用构造函数提供
                       第二种：使用set方法提供
                       第三种：使用注解提供
    -->

    <!--    构造函数的注入
             使用的标签：constructor-arg
             标签出现的位置：bean标签的内部
               标签的属性：
                   type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个参数
                   index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是0开始
                   name：用于指定给构造函数中指定的参数赋值
                   ===================以上三个用于给指定给构造函数中那个参数赋值======================
                   value:用于提供基本类型和string类型的数据
                   ref：用于指定其他的bean类型的数据，它指的就是在spring的IOC核心容器出现过的bean对象
              优势：
                 在获取bean对象时，注入的数据是必须的操作，否则对象创建不成功
              弊端：
                 改变了bean对象的实例化方式：使我们在创建对象的时候，如果用不到这些数据，也必须提供
    -->


    <bean id="accountService" class="com.lwq.service.impl.AccountServiceImpl">
        <constructor-arg name="age" value="15"></constructor-arg>
        <constructor-arg name="name" value="李四"></constructor-arg>
        <constructor-arg name="birthday" ref="ss"></constructor-arg>
    </bean>

    <!--    配置一个日期对象-->
    <bean id="ss" class="java.util.Date"></bean>


    <!--    set方法的注入           更常用的方式
         涉及的标签：property
         出现的位置：bean标签的内部
                  标签的属性：
                       name：用于指定时所调用的set方法名称
                       ===================以上三个用于给指定给构造函数中那个参数赋值======================
                       value:用于提供基本类型和string类型的数据
                       ref：用于指定其他的bean类型的数据，它指的就是在spring的IOC核心容器出现过的bean对象
                   优势：
                      创建对象时没有明确的限制，可以直接使用默认构造函数
                    弊端：
                       如果有某个成员变量必须有值，则获取对象时set方法无法执行

    -->

    <bean id="accountService2" class="com.lwq.service.impl.AccountServiceImpl2">
        <property name="age" value="15"></property>
        <property name="birthday" ref="ss"></property>
        <property name="name" value="张三"></property>
    </bean>


    <!--    复制类型的注入/集合类型的注入-->
    <bean id="accountService3" class="com.lwq.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>小白</value>
                <value>小胡</value>
                <value>小花</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>小白</value>
                <value>小黑</value>
                <value>小罗</value>
            </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="testa" value="aaaa"></entry>
                <entry key="testb" value="bbbb"></entry>
                <entry key="testc" value="cccc"></entry>
            </map>
        </property>


        <property name="myProps">
            <props>
                <prop key="testf">hh</prop>
            </props>
        </property>
    </bean>

</beans>